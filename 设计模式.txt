C++类与类之间的3种关系：
  1：继承
    子类(派生类）继承 父类（基类）。父类（基类）可以是虚基类，内部也可以有虚函数，借此可以实现父类（基类）的指针、引用指向子类（派生类）等，C++多态实现的方法之一；
  2：复合
    一个类内含有其它类。没有继承功能强大但原理简单，同样可以完整的调用类内所含类的所有功能信息，功能更像继承中的public继承。例如：设计模式中的适配器模式；
  3：委托
    一个类中含有指向其它类的指针，可以在需要时构造。因为指针的大小是固定的所以比复合类更加的灵活。例如：桥接模式的实现，在接口类中含有实现类的指针，通过调用实现类的接口实现接口类的功   能实现，在实现类中的任何修改都不会影响到使用接口类的地方；


//*********************************************************************************//

设计模式：
（1）适配器模式：
    在原有类的基础上进行封闭，增加或者减少其功能以达到适用于现有功能的目的。例如：在deque的基础上加上适配器构造的queue;

（2）模板方法：
    在基类（父类）上设计实现通用接口部分，不通用个性化部分调用虚函数实现，在派生类（子类）中具体实现虚函数功能；

（3）观察者模式：
    一个对象响应另一个对象的行为动作。在事件发出者内有一个响应者的数组，观察者可以把自己的指针放在其内，在事件发生后事件发出者依次通知响应者；

（4）组合模式：
    一个类含有一个父类的指针，它可以指向其所有的子类，已方便以后的功能扩展；

（5）桥接模式：
    在接口类中含有实现类的指针，通过调用实现类的接口实现接口类的功能实现，在实现类中的任何  修改都不会影响到使用接口类的地方；

（6）原型模式：
    以一个类的对象为原型复制成类的其它对象，解决类的复杂构造问题？？？
